name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: finstop-auth-service
  ECS_CLUSTER: finstop-prod-cluster
  ECS_SERVICE: finstop-prod-auth-service
  CONTAINER_NAME: auth-service

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build and Test
      run: ./mvnw clean verify

    - name: Upload Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/failsafe-reports/
        retention-days: 5

  deploy-dev:
    name: Deploy to Development
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: development

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
        aws ecr create-repository \
          --repository-name ${ECR_REPOSITORY} \
          --image-scanning-configuration scanOnPush=true \
          --encryption-configuration encryptionType=AES256

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      env:
        TF_WORKSPACE: dev

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="environment=dev" -out=tfplan
      env:
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

  # deploy-prod:
  #   name: Deploy to Production
  #   needs: deploy-dev
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
  #       mask-aws-account-id: true

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2

  #   - name: Terraform Init
  #     run: |
  #       cd terraform
  #       terraform init
  #     env:
  #       TF_WORKSPACE: prod

  #   - name: Terraform Plan
  #     run: |
  #       cd terraform
  #       terraform plan -var="environment=prod" -out=tfplan
  #     env:
  #       TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  #       TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  #   - name: Terraform Apply
  #     run: |
  #       cd terraform
  #       terraform apply -auto-approve tfplan 